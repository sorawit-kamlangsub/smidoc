//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from "axios";

import * as dayjs from "dayjs";

export class DocumentClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    documents(id: string, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/documents/{id}";
        if (id === undefined || id === null) throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {},
            cancelToken,
        };

        return this.instance
            .request(options_)
            .catch((_error: any) => {
                if (isAxiosError(_error) && _error.response) {
                    return _error.response;
                } else {
                    throw _error;
                }
            })
            .then((_response: AxiosResponse) => {
                return this.processDocuments(_response);
            });
    }

    protected processDocuments(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            // const _responseText = response.data;
            return Promise.resolve<void>(null as any);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param refCode (optional)
     * @param documentId (optional)
     * @param subTypeId (optional)
     * @return Success
     */
    getDocument(
        refCode?: string | undefined,
        documentId?: string | undefined,
        subTypeId?: string | undefined,
        cancelToken?: CancelToken | undefined
    ): Promise<void> {
        let url_ = this.baseUrl + "/documents/GetDocument?";
        if (refCode === null) throw new Error("The parameter 'refCode' cannot be null.");
        else if (refCode !== undefined) url_ += "RefCode=" + encodeURIComponent("" + refCode) + "&";
        if (documentId === null) throw new Error("The parameter 'documentId' cannot be null.");
        else if (documentId !== undefined) url_ += "DocumentId=" + encodeURIComponent("" + documentId) + "&";
        if (subTypeId === null) throw new Error("The parameter 'subTypeId' cannot be null.");
        else if (subTypeId !== undefined) url_ += "SubTypeId=" + encodeURIComponent("" + subTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {},
            cancelToken,
        };

        return this.instance
            .request(options_)
            .catch((_error: any) => {
                if (isAxiosError(_error) && _error.response) {
                    return _error.response;
                } else {
                    throw _error;
                }
            })
            .then((_response: AxiosResponse) => {
                return this.processGetDocument(_response);
            });
    }

    protected processGetDocument(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            // const _responseText = response.data;
            return Promise.resolve<void>(null as any);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param subTypeID (optional)
     * @param branchID (optional)
     * @param mainIndex (optional)
     * @param searchIndex (optional)
     * @param file (optional)
     * @param createdByID (optional)
     * @return Success
     */
    insertDocument(
        subTypeID?: string | undefined,
        branchID?: string | undefined,
        mainIndex?: string | undefined,
        searchIndex?: string | undefined,
        file?: FileParameter | undefined,
        createdByID?: string | undefined,
        cancelToken?: CancelToken | undefined
    ): Promise<void> {
        let url_ = this.baseUrl + "/documents/InsertDocument";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (subTypeID === null || subTypeID === undefined) throw new Error("The parameter 'subTypeID' cannot be null.");
        else content_.append("subTypeID", subTypeID.toString());
        if (branchID === null || branchID === undefined) throw new Error("The parameter 'branchID' cannot be null.");
        else content_.append("branchID", branchID.toString());
        if (mainIndex === null || mainIndex === undefined) throw new Error("The parameter 'mainIndex' cannot be null.");
        else content_.append("mainIndex", mainIndex.toString());
        if (searchIndex === null || searchIndex === undefined)
            throw new Error("The parameter 'searchIndex' cannot be null.");
        else content_.append("searchIndex", searchIndex.toString());
        if (file === null || file === undefined) throw new Error("The parameter 'file' cannot be null.");
        else content_.append("file", file.data, file.fileName ? file.fileName : "file");
        if (createdByID === null || createdByID === undefined)
            throw new Error("The parameter 'createdByID' cannot be null.");
        else content_.append("createdByID", createdByID.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {},
            cancelToken,
        };

        return this.instance
            .request(options_)
            .catch((_error: any) => {
                if (isAxiosError(_error) && _error.response) {
                    return _error.response;
                } else {
                    throw _error;
                }
            })
            .then((_response: AxiosResponse) => {
                return this.processInsertDocument(_response);
            });
    }

    protected processInsertDocument(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            // const _responseText = response.data;
            return Promise.resolve<void>(null as any);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class ExampleContollerClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    get(cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Example/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {},
            cancelToken,
        };

        return this.instance
            .request(options_)
            .catch((_error: any) => {
                if (isAxiosError(_error) && _error.response) {
                    return _error.response;
                } else {
                    throw _error;
                }
            })
            .then((_response: AxiosResponse) => {
                return this.processGet(_response);
            });
    }

    protected processGet(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            // const _responseText = response.data;
            return Promise.resolve<void>(null as any);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class SmileDocClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * แสดง ข้อมูลเอกสาร SmileDoc ด้วยเลขclaim
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @return Success
     */
    getDocuemntsByClaimId(
        claimId: string,
        page?: number | undefined,
        recordsPerPage?: number | undefined,
        orderingField?: string | undefined,
        ascendingOrder?: boolean | undefined,
        cancelToken?: CancelToken | undefined
    ): Promise<SmileDocDocumentResponseListServiceResponse> {
        let url_ = this.baseUrl + "/SmileDoc/documents/{claimId}/claim?";
        if (claimId === undefined || claimId === null) throw new Error("The parameter 'claimId' must be defined.");
        url_ = url_.replace("{claimId}", encodeURIComponent("" + claimId));
        if (page === null) throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined) url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null) throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        if (orderingField === null) throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined) url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null) throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                Accept: "text/plain",
            },
            cancelToken,
        };

        return this.instance
            .request(options_)
            .catch((_error: any) => {
                if (isAxiosError(_error) && _error.response) {
                    return _error.response;
                } else {
                    throw _error;
                }
            })
            .then((_response: AxiosResponse) => {
                return this.processGetDocuemntsByClaimId(_response);
            });
    }

    protected processGetDocuemntsByClaimId(
        response: AxiosResponse
    ): Promise<SmileDocDocumentResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<SmileDocDocumentResponseListServiceResponse>(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SmileDocDocumentResponseListServiceResponse>(null as any);
    }

    /**
     * แสดง ข้อมูลไฟล์เอกสาร SmileDoc ด้วยเลข DocumentId
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @return Success
     */
    getSmileDocumentsFilesByDocumentId(
        documentId: string,
        page?: number | undefined,
        recordsPerPage?: number | undefined,
        orderingField?: string | undefined,
        ascendingOrder?: boolean | undefined,
        cancelToken?: CancelToken | undefined
    ): Promise<SmileDocFileResponseListServiceResponse> {
        let url_ = this.baseUrl + "/SmileDoc/documents/{documentId}/files?";
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
        if (page === null) throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined) url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null) throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        if (orderingField === null) throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined) url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null) throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                Accept: "text/plain",
            },
            cancelToken,
        };

        return this.instance
            .request(options_)
            .catch((_error: any) => {
                if (isAxiosError(_error) && _error.response) {
                    return _error.response;
                } else {
                    throw _error;
                }
            })
            .then((_response: AxiosResponse) => {
                return this.processGetSmileDocumentsFilesByDocumentId(_response);
            });
    }

    protected processGetSmileDocumentsFilesByDocumentId(
        response: AxiosResponse
    ): Promise<SmileDocFileResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<SmileDocFileResponseListServiceResponse>(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SmileDocFileResponseListServiceResponse>(null as any);
    }
}

export class SSSDocClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * บันทึกไฟล์
     * @param documentCode (optional)
     * @param documentsubType (optional)
     * @param branchId (optional)
     * @param mainIndex (optional)
     * @param searchIndex (optional)
     * @param file (optional)
     * @return Success
     */
    documentUpload(
        documentCode?: string | undefined,
        documentsubType?: string | undefined,
        branchId?: number | undefined,
        mainIndex?: string | undefined,
        searchIndex?: string | undefined,
        file?: FileParameter | undefined,
        cancelToken?: CancelToken | undefined
    ): Promise<SSSDocumentUploadResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/SSSDoc/DocumentUpload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (documentCode === null || documentCode === undefined)
            throw new Error("The parameter 'documentCode' cannot be null.");
        else content_.append("documentCode", documentCode.toString());
        if (documentsubType === null || documentsubType === undefined)
            throw new Error("The parameter 'documentsubType' cannot be null.");
        else content_.append("documentsubType", documentsubType.toString());
        if (branchId === null || branchId === undefined) throw new Error("The parameter 'branchId' cannot be null.");
        else content_.append("branchId", branchId.toString());
        if (mainIndex === null || mainIndex === undefined) throw new Error("The parameter 'mainIndex' cannot be null.");
        else content_.append("mainIndex", mainIndex.toString());
        if (searchIndex === null || searchIndex === undefined)
            throw new Error("The parameter 'searchIndex' cannot be null.");
        else content_.append("searchIndex", searchIndex.toString());
        if (file === null || file === undefined) throw new Error("The parameter 'file' cannot be null.");
        else content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                Accept: "text/plain",
            },
            cancelToken,
        };

        return this.instance
            .request(options_)
            .catch((_error: any) => {
                if (isAxiosError(_error) && _error.response) {
                    return _error.response;
                } else {
                    throw _error;
                }
            })
            .then((_response: AxiosResponse) => {
                return this.processDocumentUpload(_response);
            });
    }

    protected processDocumentUpload(response: AxiosResponse): Promise<SSSDocumentUploadResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<SSSDocumentUploadResponseDtoServiceResponse>(result200);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SSSDocumentUploadResponseDtoServiceResponse>(null as any);
    }

    /**
     * เพิ่มเติมไฟล์เอกสาร
     * @param file (optional)
     * @return Success
     */
    documentUpload2(
        documentid: string,
        file?: FileParameter | undefined,
        cancelToken?: CancelToken | undefined
    ): Promise<SSSDocumentUploadResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/SSSDoc/DocumentUpload/{documentid}";
        if (documentid === undefined || documentid === null)
            throw new Error("The parameter 'documentid' must be defined.");
        url_ = url_.replace("{documentid}", encodeURIComponent("" + documentid));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined) throw new Error("The parameter 'file' cannot be null.");
        else content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                Accept: "text/plain",
            },
            cancelToken,
        };

        return this.instance
            .request(options_)
            .catch((_error: any) => {
                if (isAxiosError(_error) && _error.response) {
                    return _error.response;
                } else {
                    throw _error;
                }
            })
            .then((_response: AxiosResponse) => {
                return this.processDocumentUpload2(_response);
            });
    }

    protected processDocumentUpload2(response: AxiosResponse): Promise<SSSDocumentUploadResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<SSSDocumentUploadResponseDtoServiceResponse>(result200);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SSSDocumentUploadResponseDtoServiceResponse>(null as any);
    }

    /**
     * แสดงข้อมูลเอกสาร
     * @return Success
     */
    sSSDoc(documentId: string, cancelToken?: CancelToken | undefined): Promise<SSSDocumentResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/SSSDoc/{documentId}";
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                Accept: "text/plain",
            },
            cancelToken,
        };

        return this.instance
            .request(options_)
            .catch((_error: any) => {
                if (isAxiosError(_error) && _error.response) {
                    return _error.response;
                } else {
                    throw _error;
                }
            })
            .then((_response: AxiosResponse) => {
                return this.processSSSDoc(_response);
            });
    }

    protected processSSSDoc(response: AxiosResponse): Promise<SSSDocumentResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<SSSDocumentResponseDtoServiceResponse>(result200);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SSSDocumentResponseDtoServiceResponse>(null as any);
    }

    /**
     * แสดงข้อมูลเอกสาร จาก ประเภทเอกสาร
     * @return Success
     */
    filter(
        searchValue: string,
        documentSubType: string,
        cancelToken?: CancelToken | undefined
    ): Promise<SSSDocumentResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/SSSDoc/filter?";
        if (searchValue === undefined || searchValue === null)
            throw new Error("The parameter 'searchValue' must be defined and cannot be null.");
        else url_ += "SearchValue=" + encodeURIComponent("" + searchValue) + "&";
        if (documentSubType === undefined || documentSubType === null)
            throw new Error("The parameter 'documentSubType' must be defined and cannot be null.");
        else url_ += "DocumentSubType=" + encodeURIComponent("" + documentSubType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                Accept: "text/plain",
            },
            cancelToken,
        };

        return this.instance
            .request(options_)
            .catch((_error: any) => {
                if (isAxiosError(_error) && _error.response) {
                    return _error.response;
                } else {
                    throw _error;
                }
            })
            .then((_response: AxiosResponse) => {
                return this.processFilter(_response);
            });
    }

    protected processFilter(response: AxiosResponse): Promise<SSSDocumentResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<SSSDocumentResponseDtoListServiceResponse>(result200);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SSSDocumentResponseDtoListServiceResponse>(null as any);
    }

    /**
     * ลบข้อมูลเอกสาร
     * @param body (optional)
     * @return Success
     */
    deletedocument(
        body?: DeleteDocumentRequestDto | undefined,
        cancelToken?: CancelToken | undefined
    ): Promise<DeleteDocumentResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/SSSDoc/deletedocument";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                Accept: "text/plain",
            },
            cancelToken,
        };

        return this.instance
            .request(options_)
            .catch((_error: any) => {
                if (isAxiosError(_error) && _error.response) {
                    return _error.response;
                } else {
                    throw _error;
                }
            })
            .then((_response: AxiosResponse) => {
                return this.processDeletedocument(_response);
            });
    }

    protected processDeletedocument(response: AxiosResponse): Promise<DeleteDocumentResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<DeleteDocumentResponseDtoServiceResponse>(result200);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeleteDocumentResponseDtoServiceResponse>(null as any);
    }

    /**
     * แสดง ข้อมูลไฟล์เอกสาร SSSDoc ด้วยเลข DocumentId
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @return Success
     */
    getSSSDocuemntsFilesByDocumentId(
        documentId: string,
        page?: number | undefined,
        recordsPerPage?: number | undefined,
        orderingField?: string | undefined,
        ascendingOrder?: boolean | undefined,
        cancelToken?: CancelToken | undefined
    ): Promise<SSSDocFileResponseListServiceResponse> {
        let url_ = this.baseUrl + "/SSSDoc/documents/{documentId}/files?";
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
        if (page === null) throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined) url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null) throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        if (orderingField === null) throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined) url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null) throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                Accept: "text/plain",
            },
            cancelToken,
        };

        return this.instance
            .request(options_)
            .catch((_error: any) => {
                if (isAxiosError(_error) && _error.response) {
                    return _error.response;
                } else {
                    throw _error;
                }
            })
            .then((_response: AxiosResponse) => {
                return this.processGetSSSDocuemntsFilesByDocumentId(_response);
            });
    }

    protected processGetSSSDocuemntsFilesByDocumentId(
        response: AxiosResponse
    ): Promise<SSSDocFileResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<SSSDocFileResponseListServiceResponse>(result200);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SSSDocFileResponseListServiceResponse>(null as any);
    }
}

export interface DeleteDocumentRequestDto {
    documentFileId: string;
}

export interface DeleteDocumentResponseDto {
    documentFileId?: string | undefined;
}

export interface DeleteDocumentResponseDtoServiceResponse {
    data?: DeleteDocumentResponseDto;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface SmileDocDocumentResponse {
    documentID?: number;
    branchName?: string | undefined;
    documentDate?: dayjs.Dayjs | undefined;
    documentTypeName?: string | undefined;
    documentListName?: string | undefined;
    documentIndexData?: string | undefined;
    actionBy?: string | undefined;
    dateAction?: dayjs.Dayjs | undefined;
    documentStatusName?: string | undefined;
}

export interface SmileDocDocumentResponseListServiceResponse {
    data?: SmileDocDocumentResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface SmileDocFileResponse {
    documentId?: string | undefined;
    documentFileCode?: string | undefined;
    documentFileName?: string | undefined;
    documentTypeId?: string | undefined;
    documentTypeName?: string | undefined;
    urlFilePath?: string | undefined;
    s3IsUploaded?: boolean;
    s3Bucket?: string | undefined;
    s3Key?: string | undefined;
    isImage?: boolean;
    createdDate?: dayjs.Dayjs | undefined;
}

export interface SmileDocFileResponseListServiceResponse {
    data?: SmileDocFileResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface SSSDocFileResponse {
    documentId?: string | undefined;
    documentFileCode?: string | undefined;
    documentFileName?: string | undefined;
    documentTypeId?: string | undefined;
    documentTypeName?: string | undefined;
    urlFilePath?: string | undefined;
    s3IsUploaded?: boolean;
    s3Bucket?: string | undefined;
    s3Key?: string | undefined;
    isImage?: boolean;
    createdDate?: dayjs.Dayjs | undefined;
}

export interface SSSDocFileResponseListServiceResponse {
    data?: SSSDocFileResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface SSSDocumentFileResponseDto {
    documentFileId?: string | undefined;
    runningNo?: number | undefined;
    pathThumbnailImg?: string | undefined;
    pathFullDoc?: string | undefined;
}

export interface SSSDocumentResponseDto {
    documentId?: string | undefined;
    fileCount?: number | undefined;
    documentSubTypeId?: string | undefined;
    documentSubTypeName?: string | undefined;
    documentFile?: SSSDocumentFileResponseDto[] | undefined;
}

export interface SSSDocumentResponseDtoListServiceResponse {
    data?: SSSDocumentResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface SSSDocumentResponseDtoServiceResponse {
    data?: SSSDocumentResponseDto;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface SSSDocumentUploadResponseDto {
    documentID?: string | undefined;
    documentfileID?: string | undefined;
}

export interface SSSDocumentUploadResponseDtoServiceResponse {
    data?: SSSDocumentUploadResponseDto;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result?: any
): any {
    if (result !== null && result !== undefined) throw result;
    else throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}
